/*
B√ÄI T·∫¨P: C·∫•u tr√∫c d·ªØ li·ªáu trong Dart
====================================
B√†i 1: List

C√≥ bao nhi√™u c√°ch ƒë·ªÉ khai b√°o m·ªôt List trong ƒëo·∫°n code? Li·ªát k√™ v√† gi·∫£i th√≠ch t·ª´ng c√°ch.
Cho List ['A', 'B', 'C']. Vi·∫øt code ƒë·ªÉ:

Th√™m ph·∫ßn t·ª≠ 'D' v√†o cu·ªëi List
  list.add('D');

Ch√®n ph·∫ßn t·ª≠ 'X' v√†o v·ªã tr√≠ th·ª© 1
  list.insert(1, 'X');
X√≥a ph·∫ßn t·ª≠ 'B'
  list.remove('B');

In ra ƒë·ªô d√†i c·ªßa List
  print(list.length); // K·∫øt qu·∫£: 4


ƒêo·∫°n code sau s·∫Ω cho k·∫øt qu·∫£ g√¨?

dartCopyvar list = [1, 2, 3, 4, 5];
list.removeWhere((e) => e % 2 == 0);
print(list);
K·∫øt qu·∫£: [1, 3, 5]


Gi·∫£i th√≠ch s·ª± kh√°c nhau gi·ªØa c√°c ph∆∞∆°ng th·ª©c:

remove() v√† removeAt()

emove(value): X√≥a ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n c√≥ gi√° tr·ªã b·∫±ng value. N·∫øu kh√¥ng t√¨m th·∫•y, kh√¥ng l√†m g√¨.
removeAt(index): X√≥a ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ index c·ª• th·ªÉ.

add() v√† insert()
add(value): Th√™m value v√†o cu·ªëi List.
insert(index, value): Ch√®n value v√†o v·ªã tr√≠ index, ƒë·∫©y c√°c ph·∫ßn t·ª≠ ph√≠a sau sang m·ªôt v·ªã tr√≠.

addAll() v√† insertAll()
addAll(iterable): Th√™m t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ t·ª´ iterable v√†o cu·ªëi List.
insertAll(index, iterable): Ch√®n t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ t·ª´ iterable v√†o v·ªã tr√≠ index, ƒë·∫©y c√°c ph·∫ßn t·ª≠ ph√≠a sau sang m·ªôt v·ªã tr√≠.

====================================
B√†i 2: Set

Set kh√°c List ·ªü nh·ªØng ƒëi·ªÉm n√†o? N√™u √≠t nh·∫•t 3 ƒëi·ªÉm kh√°c bi·ªát.
Set: Ch·ªâ l∆∞u tr·ªØ c√°c ph·∫ßn t·ª≠ duy nh·∫•t. N·∫øu b·∫°n c·ªë g·∫Øng th√™m m·ªôt ph·∫ßn t·ª≠ ƒë√£ t·ªìn t·∫°i, n√≥ s·∫Ω kh√¥ng ƒë∆∞·ª£c th√™m v√†o.
List: Cho ph√©p c√°c ph·∫ßn t·ª≠ tr√πng l·∫∑p. B·∫°n c√≥ th·ªÉ th√™m c√πng m·ªôt ph·∫ßn t·ª≠ nhi·ªÅu l·∫ßn.
Set: Kh√¥ng b·∫£o ƒë·∫£m th·ª© t·ª± c·ªßa c√°c ph·∫ßn t·ª≠. Khi b·∫°n l·∫∑p qua m·ªôt Set, th·ª© t·ª± kh√¥ng nh·∫•t thi·∫øt ph·∫£i gi·ªëng nh∆∞ khi b·∫°n th√™m ph·∫ßn t·ª≠.
List: B·∫£o ƒë·∫£m th·ª© t·ª±, t·ª©c l√† c√°c ph·∫ßn t·ª≠ s·∫Ω ƒë∆∞·ª£c l∆∞u gi·ªØ theo th·ª© t·ª± m√† b·∫°n th√™m v√†o.

Cho hai Set:

dartCopyvar set1 = {1, 2, 3};
var set2 = {3, 4, 5};
T√≠nh k·∫øt qu·∫£ c·ªßa:

Union (h·ª£p)
// Union (h·ª£p)
var union = set1.union(set2); // K·∫øt qu·∫£: {1, 2, 3, 4, 5}

Intersection (giao)
// Intersection (giao)
var intersection = set1.intersection(set2); // K·∫øt qu·∫£: {3}

Difference (hi·ªáu) c·ªßa set1 v·ªõi set2
// Difference (hi·ªáu) c·ªßa set1 v·ªõi set2
var difference = set1.difference(set2); // K·∫øt qu·∫£: {1, 2}

ƒêo·∫°n code sau s·∫Ω cho k·∫øt qu·∫£ g√¨?

dartCopyvar mySet = Set.from([1, 2, 2, 3, 3, 4]);
print(mySet.length);
K·∫øt qu·∫£: 4



====================================
B√†i 3: Map

Vi·∫øt code ƒë·ªÉ th·ª±c hi·ªán c√°c y√™u c·∫ßu sau v·ªõi Map:

dartCopyMap<String, dynamic> user = {
  'name': 'Nam',
  'age': 20,
  'isStudent': true
};

Th√™m email: 'nam@gmail.com'
 // Th√™m email: 'nam@gmail.com'
  user['email'] = 'nam@gmail.com';

C·∫≠p nh·∫≠t age th√†nh 21
  // C·∫≠p nh·∫≠t age th√†nh 21
  user['age'] = 21;

X√≥a tr∆∞·ªùng isStudent
  // X√≥a tr∆∞·ªùng isStudent
  user.remove('isStudent');

Ki·ªÉm tra xem Map c√≥ ch·ª©a key 'phone' kh√¥ng
  bool hasPhone = user.containsKey('phone');
  print('C√≥ ch·ª©a key "phone": $hasPhone');

So s√°nh hai c√°ch truy c·∫≠p gi√° tr·ªã trong Map:

dartCopyuser['phone']
C√°ch n√†y s·∫Ω tr·∫£ v·ªÅ gi√° tr·ªã t∆∞∆°ng ·ª©ng v·ªõi key 'phone'. N·∫øu kh√¥ng c√≥ key n√†y, n√≥ s·∫Ω tr·∫£ v·ªÅ null.

user['phone'] ?? 'Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i'
C√°ch n√†y s·ª≠ d·ª•ng to√°n t·ª≠ null-aware (??). N·∫øu user['phone'] l√† null (t·ª©c l√† kh√¥ng t·ªìn t·∫°i key 'phone'), n√≥ s·∫Ω tr·∫£ v·ªÅ chu·ªói 'Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i' thay v√¨ null.

Vi·∫øt m·ªôt h√†m nh·∫≠n v√†o m·ªôt Map v√† in ra t·∫•t c·∫£ c√°c c·∫∑p key-value, m·ªói c·∫∑p tr√™n m·ªôt d√≤ng.
void printMap(Map<String, dynamic> map) {
  map.forEach((key, value) {
    print('$key: $value');
  });
}

void main() {
  Map<String, dynamic> user = {
    'name': 'Nam',
    'age': 21,
    'email': 'nam@gmail.com'
  };

  printMap(user);
}

====================================
Ph·∫ßn 4: Runes

Runes ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨? Cho v√≠ d·ª• c·ª• th·ªÉ.
Runes trong Dart ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë·∫°i di·ªán cho c√°c k√Ω t·ª± Unicode, ƒë·∫∑c bi·ªát l√† nh·ªØng k√Ω t·ª± kh√¥ng th·ªÉ ƒë∆∞·ª£c bi·ªÉu di·ªÖn b·∫±ng m·ªôt k√Ω t·ª± 16-bit. 
ƒêi·ªÅu n√†y r·∫•t h·ªØu √≠ch khi l√†m vi·ªác v·ªõi c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát, nh∆∞ emoji ho·∫∑c c√°c k√Ω t·ª± trong c√°c ng√¥n ng·ªØ kh√°c.

Vi·∫øt code ƒë·ªÉ:


T·∫°o m·ªôt Runes ch·ª©a k√Ω t·ª± emoji c∆∞·ªùi üòÄ
 // T·∫°o m·ªôt Runes ch·ª©a k√Ω t·ª± emoji c∆∞·ªùi üòÄ
  Runes emoji = Runes('\u{1F600}'); // M√£ Unicode cho emoji c∆∞·ªùi

Chuy·ªÉn ƒë·ªïi Runes ƒë√≥ th√†nh String
 // Chuy·ªÉn ƒë·ªïi Runes ƒë√≥ th√†nh String
  String emojiString = String.fromCharCodes(emoji);

In ra s·ªë l∆∞·ª£ng ƒëi·ªÉm m√£ c·ªßa Runes
// In ra s·ªë l∆∞·ª£ng ƒëi·ªÉm m√£ c·ªßa Runes
  print('Emoji: $emojiString');
  print('S·ªë l∆∞·ª£ng ƒëi·ªÉm m√£: ${emoji.length}');

*/